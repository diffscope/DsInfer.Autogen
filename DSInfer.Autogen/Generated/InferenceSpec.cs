//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DsInfer {

public class InferenceSpec : ContributeSpec {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal InferenceSpec(global::System.IntPtr cPtr, bool cMemoryOwn) : base(dsinfer_csharp_bindingsPINVOKE.InferenceSpec_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InferenceSpec obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(InferenceSpec obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dsinfer_csharp_bindingsPINVOKE.delete_InferenceSpec(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public string path() {
    string ret = dsinfer_csharp_bindingsPINVOKE.InferenceSpec_path(swigCPtr);
    return ret;
}

  public string className() {
    string ret = dsinfer_csharp_bindingsPINVOKE.InferenceSpec_className(swigCPtr);
    return ret;
  }

  public DisplayText name() {
    DisplayText ret = new DisplayText(dsinfer_csharp_bindingsPINVOKE.InferenceSpec_name(swigCPtr), true);
    return ret;
  }

  public int apiLevel() {
    int ret = dsinfer_csharp_bindingsPINVOKE.InferenceSpec_apiLevel(swigCPtr);
    return ret;
  }

  public JsonObject schema() {
    JsonObject ret = new JsonObject(dsinfer_csharp_bindingsPINVOKE.InferenceSpec_schema(swigCPtr), true);
    return ret;
  }

  public JsonObject configuration() {
    JsonObject ret = new JsonObject(dsinfer_csharp_bindingsPINVOKE.InferenceSpec_configuration(swigCPtr), true);
    return ret;
  }

  public Inference create(JsonObject options, Error error) {
    global::System.IntPtr cPtr = dsinfer_csharp_bindingsPINVOKE.InferenceSpec_create(swigCPtr, JsonObject.getCPtr(options), Error.getCPtr(error));
    Inference ret = (cPtr == global::System.IntPtr.Zero) ? null : new Inference(cPtr, false);
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool validate(JsonValue options, /*cstype*/ out string error) {
    bool ret = dsinfer_csharp_bindingsPINVOKE.InferenceSpec_validate(swigCPtr, JsonValue.getCPtr(options), out error);
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
