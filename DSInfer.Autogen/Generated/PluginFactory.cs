//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DsInfer {

public class PluginFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PluginFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PluginFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PluginFactory obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PluginFactory() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dsinfer_csharp_bindingsPINVOKE.delete_PluginFactory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PluginFactory() : this(dsinfer_csharp_bindingsPINVOKE.new_PluginFactory(), true) {
  }

  public void addStaticPlugin(Plugin plugin) {
    dsinfer_csharp_bindingsPINVOKE.PluginFactory_addStaticPlugin(swigCPtr, Plugin.getCPtr(plugin));
  }

  public VectorPlugin staticPlugins() {
    VectorPlugin ret = new VectorPlugin(dsinfer_csharp_bindingsPINVOKE.PluginFactory_staticPlugins(swigCPtr), true);
    return ret;
  }

  public void addPluginPath(string iid, string path) {
    dsinfer_csharp_bindingsPINVOKE.PluginFactory_addPluginPath(swigCPtr, iid, path);
  }

  public void setPluginPaths(string iid, PathList paths) {
    dsinfer_csharp_bindingsPINVOKE.PluginFactory_setPluginPaths(swigCPtr, iid, PathList.getCPtr(paths));
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public PathList pluginPaths(string iid) {
    PathList ret = new PathList(dsinfer_csharp_bindingsPINVOKE.PluginFactory_pluginPaths(swigCPtr, iid), false);
    return ret;
  }

  public Plugin plugin(string iid, string key) {
    global::System.IntPtr cPtr = dsinfer_csharp_bindingsPINVOKE.PluginFactory_plugin(swigCPtr, iid, key);
    Plugin ret = (cPtr == global::System.IntPtr.Zero) ? null : new Plugin(cPtr, false);
    return ret;
  }

}

}
