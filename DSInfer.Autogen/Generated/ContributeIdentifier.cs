//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DsInfer {

public class ContributeIdentifier : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ContributeIdentifier(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ContributeIdentifier obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ContributeIdentifier obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ContributeIdentifier() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dsinfer_csharp_bindingsPINVOKE.delete_ContributeIdentifier(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ContributeIdentifier(string parent, VersionNumber version, string id) : this(dsinfer_csharp_bindingsPINVOKE.new_ContributeIdentifier__SWIG_0(parent, VersionNumber.getCPtr(version), id), true) {
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ContributeIdentifier(string parent, string id) : this(dsinfer_csharp_bindingsPINVOKE.new_ContributeIdentifier__SWIG_1(parent, id), true) {
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ContributeIdentifier(string id) : this(dsinfer_csharp_bindingsPINVOKE.new_ContributeIdentifier__SWIG_2(id), true) {
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public ContributeIdentifier() : this(dsinfer_csharp_bindingsPINVOKE.new_ContributeIdentifier__SWIG_3(), true) {
  }

  public string library() {
    string ret = dsinfer_csharp_bindingsPINVOKE.ContributeIdentifier_library(swigCPtr);
    return ret;
  }

  public VersionNumber version() {
    VersionNumber ret = new VersionNumber(dsinfer_csharp_bindingsPINVOKE.ContributeIdentifier_version(swigCPtr), true);
    return ret;
  }

  public string id() {
    string ret = dsinfer_csharp_bindingsPINVOKE.ContributeIdentifier_id(swigCPtr);
    return ret;
  }

  public bool isEmpty() {
    bool ret = dsinfer_csharp_bindingsPINVOKE.ContributeIdentifier_isEmpty(swigCPtr);
    return ret;
  }

  public string toString() {
    string ret = dsinfer_csharp_bindingsPINVOKE.ContributeIdentifier_toString(swigCPtr);
    return ret;
  }

  public static ContributeIdentifier fromString(string token) {
    ContributeIdentifier ret = new ContributeIdentifier(dsinfer_csharp_bindingsPINVOKE.ContributeIdentifier_fromString(token), true);
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isValidId(string id) {
    bool ret = dsinfer_csharp_bindingsPINVOKE.ContributeIdentifier_isValidId(id);
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
