//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DsInfer {

public class LibrarySpec : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LibrarySpec(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LibrarySpec obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(LibrarySpec obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~LibrarySpec() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dsinfer_csharp_bindingsPINVOKE.delete_LibrarySpec(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LibrarySpec(LibrarySpec other) : this(dsinfer_csharp_bindingsPINVOKE.new_LibrarySpec(LibrarySpec.swigRelease(other)), true) {
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string path() {
    string ret = dsinfer_csharp_bindingsPINVOKE.LibrarySpec_path(swigCPtr);
    return ret;
}

  public string id() {
    string ret = dsinfer_csharp_bindingsPINVOKE.LibrarySpec_id(swigCPtr);
    return ret;
  }

  public VersionNumber version() {
    VersionNumber ret = new VersionNumber(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_version(swigCPtr), true);
    return ret;
  }

  public VersionNumber compatVersion() {
    VersionNumber ret = new VersionNumber(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_compatVersion(swigCPtr), true);
    return ret;
  }

  public DisplayText description() {
    DisplayText ret = new DisplayText(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_description(swigCPtr), true);
    return ret;
  }

  public DisplayText vendor() {
    DisplayText ret = new DisplayText(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_vendor(swigCPtr), true);
    return ret;
  }

  public DisplayText copyright() {
    DisplayText ret = new DisplayText(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_copyright(swigCPtr), true);
    return ret;
  }

  public string readme() {
    string ret = dsinfer_csharp_bindingsPINVOKE.LibrarySpec_readme(swigCPtr);
    return ret;
}

  public string url() {
    string ret = dsinfer_csharp_bindingsPINVOKE.LibrarySpec_url(swigCPtr);
    return ret;
  }

  public ContributeList contributes(int type) {
    ContributeList ret = new ContributeList(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_contributes(swigCPtr, type), true);
    return ret;
  }

  public ContributeSpec contribute(int type, string id) {
    global::System.IntPtr cPtr = dsinfer_csharp_bindingsPINVOKE.LibrarySpec_contribute(swigCPtr, type, id);
    ContributeSpec ret = (cPtr == global::System.IntPtr.Zero) ? null : new ContributeSpec(cPtr, false);
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VectorLibraryDependency dependencies() {
    VectorLibraryDependency ret = new VectorLibraryDependency(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_dependencies(swigCPtr), false);
    return ret;
  }

  public Error error() {
    Error ret = new Error(dsinfer_csharp_bindingsPINVOKE.LibrarySpec_error(swigCPtr), true);
    return ret;
  }

  public bool isLoaded() {
    bool ret = dsinfer_csharp_bindingsPINVOKE.LibrarySpec_isLoaded(swigCPtr);
    return ret;
  }

  public Environment env() {
    global::System.IntPtr cPtr = dsinfer_csharp_bindingsPINVOKE.LibrarySpec_env(swigCPtr);
    Environment ret = (cPtr == global::System.IntPtr.Zero) ? null : new Environment(cPtr, false);
    return ret;
  }

}

}
