//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DsInfer {

public class InferenceTask : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal InferenceTask(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InferenceTask obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(InferenceTask obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~InferenceTask() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          dsinfer_csharp_bindingsPINVOKE.delete_InferenceTask(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool initialize(JsonValue args, Error error) {
    bool ret = dsinfer_csharp_bindingsPINVOKE.InferenceTask_initialize(swigCPtr, JsonValue.getCPtr(args), Error.getCPtr(error));
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool start(JsonValue input, Error error) {
    bool ret = dsinfer_csharp_bindingsPINVOKE.InferenceTask_start(swigCPtr, JsonValue.getCPtr(input), Error.getCPtr(error));
    if (dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Pending) throw dsinfer_csharp_bindingsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool stop(Error error) {
    bool ret = dsinfer_csharp_bindingsPINVOKE.InferenceTask_stop(swigCPtr, Error.getCPtr(error));
    return ret;
  }

  public virtual long id() {
    long ret = dsinfer_csharp_bindingsPINVOKE.InferenceTask_id(swigCPtr);
    return ret;
  }

  public virtual InferenceTask.State state() {
    InferenceTask.State ret = (InferenceTask.State)dsinfer_csharp_bindingsPINVOKE.InferenceTask_state(swigCPtr);
    return ret;
  }

  public virtual JsonValue result() {
    JsonValue ret = new JsonValue(dsinfer_csharp_bindingsPINVOKE.InferenceTask_result(swigCPtr), true);
    return ret;
  }

  public enum State {
    Idle,
    Running,
    Failed,
    Terminated
  }

}

}
